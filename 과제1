#include <stdio.h>
#include <stdlib.h>

void sum(int*** a, int*** b, int*** c, int n1, int n2, int n3) {
    int z, y, x;
    for (z = 0; z < n1; z++) {
        for (y = 0; y < n2; y++) {
            for (x = 0; x < n3; x++) {
                c[z][y][x] = a[z][y][x] + b[z][y][x];
            }
        }
    }
}

int main() {
    int n1 = 3, n2 = 5, n3 = 4;
    int*** a, *** b, *** c;
    int z, y, x;

    
    a = (int***)malloc(n1 * sizeof(int**));
    b = (int***)malloc(n1 * sizeof(int**));
    c = (int***)malloc(n1 * sizeof(int**)); /* 3중배열이라서 *** */
    

    for (z = 0; z < n1; z++) {
        a[z] = (int**)malloc(n2 * sizeof(int*));
        b[z] = (int**)malloc(n2 * sizeof(int*));
        c[z] = (int**)malloc(n2 * sizeof(int*)); /* z축 배열 만들었으니 배열 두개만 더 만들면 되서  * 두개 */
        
        for (y = 0; y < n2; y++) {
            a[z][y] = (int*)malloc(n3 * sizeof(int));
            b[z][y] = (int*)malloc(n3 * sizeof(int));
            c[z][y] = (int*)malloc(n3 * sizeof(int)); /* z,y 만들었으니 배열 하나만 더 만들면 돼서 * 하나 */
            
            for (x = 0; x < n3; x++) {
                a[z][y][x] = 1 ; 
                b[z][y][x] = 2 ; 
            }
        }
    }

    
    sum(a, b, c, n1, n2, n3);

   
    printf("Array A:\n");
    for (z = 0; z < n1; z++) {
        for (y = 0; y < n2; y++) {
            for (x = 0; x < n3; x++) {
                printf("%d ", a[z][y][x]);
            }
            printf("\n");
        }
        printf("\n");
    }

    printf("Array B:\n");
    for (z = 0; z < n1; z++) {
        for (y = 0; y < n2; y++) {
            for (x = 0; x < n3; x++) {
                printf("%d ", b[z][y][x]);
            }
            printf("\n");
        }
        printf("\n");
    }

    printf("Array C:\n");
    for (z = 0; z < n1; z++) {
        for (y = 0; y < n2; y++) {
            for (x = 0; x < n3; x++) {
                printf("%d ", c[z][y][x]);
            }
            printf("\n");
        }
        printf("\n");
    }

    
    for (z = 0; z < n1; z++) {
        for (y = 0; y < n2; y++) {
            free(a[z][y]);
            free(b[z][y]);
            free(c[z][y]);
            }
        free(a[z]);
        free(b[z]);
        free(c[z]);
    }
    free(a);
    free(b);
    free(c);
return 0;
    
}
